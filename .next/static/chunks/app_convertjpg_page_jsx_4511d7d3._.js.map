{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/apple/Desktop/next-js-snap-test/app/convertjpg/page.jsx"],"sourcesContent":["\"use client\"; // Add this directive at the top of the file\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\nfunction Convertjpg() {\n  const [files, setFiles] = useState([]);\n  const [processedFiles, setProcessedFiles] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isProcessed, setIsProcessed] = useState(false);\n\n  // Handle file input change\n  const handleFileInputChange = useCallback((e) => {\n    const newFiles = Array.from(e.target.files);\n    setFiles((prevFiles) => [...prevFiles, ...newFiles]);\n  }, []);\n\n  // Helper function to format file size\n  const formatFileSize = (size) => {\n    if (size < 1024) return `${size} B`;\n    if (size < 1024 * 1024) return `${(size / 1024).toFixed(2)} KB`;\n    return `${(size / (1024 * 1024)).toFixed(2)} MB`;\n  };\n\n  // Function to calculate total size of uploaded images\n  const getTotalSize = () => files.reduce((total, file) => total + file.size, 0);\n\n  // Convert image to JPG\n  const convertImage = useCallback((file) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      const url = URL.createObjectURL(file);\n      img.src = url;\n\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n\n        canvas.toBlob(\n          (blob) => {\n            if (!blob) {\n              console.error('Failed to convert image:', file.name);\n              reject(new Error('Failed to convert image.'));\n              return;\n            }\n            resolve(blob);\n          },\n          'image/jpeg',\n          0.85\n        );\n        URL.revokeObjectURL(url);\n      };\n\n      img.onerror = (err) => {\n        console.error('Error loading image:', err);\n        URL.revokeObjectURL(url);\n        reject(new Error('Error loading image.'));\n      };\n    });\n  }, []);\n\n  // Generate output file name\n  const getOutputName = useCallback((originalName) => {\n    return originalName.replace(/\\.[^/.]+$/, '') + '_converted.jpg';\n  }, []);\n\n  // Download processed files\n  const downloadProcessedFiles = useCallback(async () => {\n    if (processedFiles.length === 0) {\n      alert('No processed files to download.');\n      return;\n    }\n\n    if (processedFiles.length === 1) {\n      const file = processedFiles[0];\n      console.log('Downloading:', file.name);\n      saveAs(new Blob([file.blob], { type: 'image/jpeg' }), getOutputName(file.name));\n    } else {\n      const zip = new JSZip();\n      for (const file of processedFiles) {\n        zip.file(getOutputName(file.name), file.blob, { binary: true });\n      }\n\n      const content = await zip.generateAsync({ type: 'blob' });\n      console.log('Downloading ZIP:', content);\n      saveAs(content, 'snapimg-converted-images.zip');\n    }\n\n    // Reset UI\n    setFiles([]);\n    setProcessedFiles([]);\n    setProgress(0);\n  }, [processedFiles, getOutputName]);\n\n  const clearAllFiles = () => {\n    setFiles([]);\n  };\n\n  // Process all images\n  const processImages = useCallback(async () => {\n    if (!files || files.length === 0) {\n      alert('No files selected. Please upload images first.');\n      return;\n    }\n\n    setIsProcessing(true);\n    setProgress(0);\n\n    const supportedTypes = ['image/png', 'image/webp', 'image/gif', 'image/jpeg'];\n    const totalFiles = files.length;\n    let processedCount = 0;\n    const newProcessedFiles = [];\n\n    for (let file of files) {\n      if (!supportedTypes.includes(file.type)) {\n        alert(`Unsupported file type: ${file.name}. Only PNG, WEBP, GIF, and JPEG allowed.`);\n        continue;\n      }\n\n      try {\n        // Skip conversion if the file is already a JPG\n        if (file.type === 'image/jpeg') {\n          newProcessedFiles.push({ blob: file, name: file.name });\n        } else {\n          const processedBlob = await convertImage(file);\n          newProcessedFiles.push({ blob: processedBlob, name: file.name });\n        }\n      } catch (error) {\n        console.error(`Error processing file ${file.name}:`, error);\n      }\n\n      processedCount++;\n      setProgress(Math.floor((processedCount / totalFiles) * 100));\n    }\n\n    setProcessedFiles(newProcessedFiles);\n    setIsProcessing(false);\n    setIsProcessed(newProcessedFiles.length > 0);\n\n    if (newProcessedFiles.length > 0) {\n      // alert('Processing complete! You can now download the files.');\n    } else {\n      alert('No valid images were processed.');\n    }\n  }, [files, convertImage]);\n\n  // Delete a file from the list\n  const deleteFile = useCallback((index) => {\n    setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\n  }, []);\n\n  // Cleanup object URLs\n  useEffect(() => {\n    return () => {\n      files.forEach(file => URL.revokeObjectURL(file));\n    };\n  }, [files]);\n\n  useEffect(() => {\n    const dropZone = document.getElementById('drop-zone');\n\n    const handleDragOver = (e) => {\n      e.preventDefault();\n      dropZone.classList.add('drag-over');\n    };\n\n    const handleDragLeave = () => {\n      dropZone.classList.remove('drag-over');\n    };\n\n    const handleDrop = (e) => {\n      e.preventDefault();\n      dropZone.classList.remove('drag-over');\n\n      const droppedFiles = Array.from(e.dataTransfer.files);\n      setFiles((prevFiles) => [...prevFiles, ...droppedFiles]);\n    };\n\n    dropZone.addEventListener('dragover', handleDragOver);\n    dropZone.addEventListener('dragleave', handleDragLeave);\n    dropZone.addEventListener('drop', handleDrop);\n\n    return () => {\n      dropZone.removeEventListener('dragover', handleDragOver);\n      dropZone.removeEventListener('dragleave', handleDragLeave);\n      dropZone.removeEventListener('drop', handleDrop);\n    };\n  }, []);\n\n  const resetState = () => {\n    setFiles([]);\n    setProcessedFiles([]);\n    setProgress(0);\n    setIsProcessed(false);\n  };\n\n  return (\n    <div className=\"tool-container\">\n      <div className=\"tool-header\">\n        <h1>Convert to JPG</h1>\n        <p className=\"heading-desc\">\n          Drag and drop your images below to convert them to JPG format\n        </p>\n      </div>\n      <div className='main-container-div'>\n        <div className='middle-container'>\n          <div className=\"upload-section\" id=\"drop-zone\">\n            <input\n              type=\"file\"\n              id=\"file-input\"\n              multiple\n              onChange={handleFileInputChange}\n              hidden\n            />\n            <div\n              className=\"upload-content\"\n              onClick={() => document.getElementById('file-input').click()}\n            >\n              <img src=\"/img/upload.svg\" alt=\"Upload\" className=\"upload-icon\" />\n              <h3>Drag & Drop Images</h3>\n              <p>or click to browse files</p>\n              <p className=\"support-text\">Supports: PNG, WEBP, GIF</p>\n            </div>\n          </div>\n\n          {files.length > 0 && (\n            <div className=\"image-preview-main\">\n              <div className='image-preview-sub'>\n                <h3>Uploaded Images</h3>\n                <div className=\"file-counter\">\n                  {files.length} files uploaded | {formatFileSize(getTotalSize())}\n                </div>\n              </div>\n              <div className='image-preview-grid'>\n                {files.map((file, index) => (\n                  <div key={index} className=\"preview-item\">\n                    <span className='filesize-img'>{formatFileSize(file.size)}</span>\n\n                    <img\n                      src={URL.createObjectURL(file)}\n                      alt={file.name}\n                      className=\"preview-image\"\n                    />\n                    <button\n                      className=\"delete-btn\"\n                      onClick={() => deleteFile(index)}\n                    >\n                      <img src=\"/img/delete.svg\" alt=\"Delete\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className='right-options-container'>\n          <div>\n            <h3 className='right-options-heading'>Progress</h3>\n            <div className=\"progress-container\">\n              <div className=\"progress-bar\">\n                <div className=\"progress\" style={{ width: `${progress}%` }}></div>\n              </div>\n              <div className=\"progress-text\" id=\"progress-text\">\n                {progress}% Completed\n              </div>\n            </div>\n          </div>\n          <div>\n            <h3 className='right-options-heading'>Actions</h3>\n            <div className=\"action-bar\">\n              {!isProcessed ? (\n                <button className=\"btn-4\" onClick={processImages} disabled={isProcessing || files.length === 0}>\n                  {isProcessing ? 'Processing...' : 'Convert to JPG'}\n                </button>\n              ) : (\n                <button className=\"btn-4\" onClick={downloadProcessedFiles}>\n                  Download\n                </button>\n              )}\n              {isProcessed && (\n                <button className=\"btn-2\" onClick={resetState}>\n                  Reset\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Convertjpg;"],"names":[],"mappings":"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","debugId":null}}]
}